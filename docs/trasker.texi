\input texinfo @c -*-mode:texinfo; compile-command: "makeinfo trasker.texi"-*-

@setfilename trasker.info
@documentlanguage en
@documentencoding iso-8859-1
@include version.texi
@settitle The Trasker@registeredsymbol{} Task Tracking System
@setchapternewpage odd
@ifnothtml
@setcontentsaftertitlepage
@end ifnothtml
@finalout

@copying
This manual is for Trasker@registeredsymbol{} (version @value{VERSION}, @value{UPDATED}),
a system to manage tasks for human beings.

Copyright @copyright{} 2008 G. Allen Morris III

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections.  A copy of the license is
included in the section entitled ``GNU Free Documentation License.''

@end quotation
@end copying

@dircategory Business and productivity
@direntry
* Trasker: (trasker). Documentation of the trasker task management system.
@end direntry

@titlepage
@title Trasker
@subtitle Tasking Tasks
@subtitle for Version @value{VERSION}, @value{UPDATED}
@author G. Allen Morris III <@email{gam3@@gam3.com}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Trasker - Task Managment System
@insertcopying
@end ifnottex

@menu
* Distribution::            Where to find trasker: source, packages etc.
* Introduction::            Important concepts you need to know as a user
* Invoking::                How to invoke trasker
* Protocol::                The Trasker client/server protocol
* Environment Variables::   Environment variables which affect trasker
* Errors and omissions::    Known problems
* History::                 History of Trasker
* Copying this manual::     The GNU Free Documentation License
@end menu

@node Distribution
@unnumbered Distribution

Trasker is @dfn{free software}; this means that everyone
is free to use it and free to redistribute it on certain conditions.
The precise conditions are found in the GNU General Public License that
comes with this program and can be found here: @uref{http://www.gnu.org/copyleft/gpl.html}.

@noindent
You can obtain Trasker from a friend or from the Internet:

@table @asis
@item Home page @uref{http://trasker.sourceforge.net/}
@end table

@c @node Copying, Introduction, Distribution, Top
@c #@include gpl.texi

@node Introduction, Invoking, Distribution, Top
@chapter Introduction

Trasker is a system to track the tasks that human beings are doing, or
have done.

It is built on a client server model. It is designed to support multiple
users on multiple computers and platforms.

Trasker is simular to these programs:

@itemize
  @item GnoTime
  @item KArm
  @item Quozl's gfocustimer
  @item TimeTracker
  @item PTimeTracker
  @item TimeTracker
@end itemize

Time is measured from the server. This should make little difference
to most users, but in a world wide operation it might be important. If
it is important to have users in distant timezones not overlap server
days during thier workdays you should create a seperate server for
those users.

@node Invoking, Protocol, Introduction, Top
@chapter Invoking

The server must be running on a know computer for proper operation.

@section Server

The trasker server is normally run on a single computer. All of the
client software then attaches to the server. Thera are some
administration programs that my by pass the server.

The server make available 2 ports to connect too. One is clear text and
the other uses SSL. It is up to the clients to use the correct port if
data security is important.

@section Clients

@subsection reconcile

reconcile is normally run by a user on a daily bases to verify
their time.

reconcile can also be run on an entire project or for a client. to
adjust the times involved.

@subsection invoice

Invoices can be printed.

Invoices a set up on a per client basis.  

Invoices can be printed by the week, or month.

A @LaTeX{} template is used as the base of the invoice.

The invoice will include all the users in the projects that are
being billed.

@subsection trist

@subsection trail

There is an email client for trasker. With it you can control some of
the feature of Trasker by sending emails to a known address.

The Trasker email client is called trail and is normally run as an
alias on a mail system.

As security can be a problem with email the tremail can require mail to
be signed.

@subsection Focus Tracking

The focus tracking program is an interface to the local computer system.
This program will be different for computer and even for different interfaces.

Currently there is only a focus tracker for the X window system.

@noindent
The focus tracking software does 3 functions:

@itemize

@item it determines whether a terminal is active.

@item it tracks the what windows are active and informs the server.

@item it sends other hints to the server to help detirmine what project is active.
This include monitoring which page is active, and watching for several key properties and
sending apropiate signals to the server.

@end itemize

@subsubsection X windows

The focus tracking program is normally started automatically in you .xinit file.

@example
focus
@end example

And then killed when X is closed with something like

@example
focus -k
@end example

@subsubsection Microsoft Windows

@node Protocol, Environment Variables, Invoking, Top
@chapter Protocol

When the trasker server is first connected to it returns a string that give
the version of TTCP that the server is using.

@emph{TTCP 0.01} for example.

@unnumberedsec Client Commands

@table @code

@item authorize @emph{user/password}



@item user @emph{user}

The user command when run for the first time from a client will return
the list of projects for that user.  This is normally the first command
given by the client after authentication.

The server normally responds by sending a list of projects to the client.

@item idle @emph{host} @emph{user} @emph{time}

The idle command informs the server that the user is ``likely'' not at the
console of that host any longer.

@item active @emph{host} @emph{user} @emph{time}

The active command informs the server that a user is likely at working on
a given host.

@item change @emph{user} @emph{project}

@item push @emph{user} @emph{project_id}

@item pop @emph{user}

@item project add @emph{title} @emph{parent_id}

If parent id is 0 then the project will become a root project.

@item project delete @emph{id}

Delete the project with the given id. This will only work if the
project has never been used (you can use merge to remove a project that
has been used).

@item project move @emph{n} @emph{m}

where @emph{n} is the project id and @emph{m} is the the id of the new
parent.  This can fail if name already exists under the parent.
This simply reatatched the project to a new parent.

@item project rename @emph{n} @emph{name}

where @emph{n} is the id of the project and @emph{name} in the new name
of the project.

@end table

@unnumberedsec Server Commands

@table @code

@item entry @emph{user} @emph{name} @emph{id} @emph{time for day}

@end table

@node Environment Variables, Errors and omissions, Protocol, Top
@chapter Environment Variables

Trasker uses the following environment variables:

@table @code

@item VISUAL

Some Trasker applications use this variable to determine what program to use
to edit text.

@end table

@section design
@subsection offline

If a timeslice is added to a reconciled page some sort of error needs to be generated.

@subsection merging

It is possible to merge one project into another.  All of the unreconsiled
times from the original project will be moved to the new project.

@subsection alarms

These are notifications and can come from many sources.
A notification has a start time and my have a endtime and a type.

@itemize @bullet
@item action required

@item quick
This type is for quick reminders normally this will just bring up a
message on the current device.

@end itemize

@node Errors and omissions, History, Environment Variables, Top
@chapter Errors and Omissions

There are no errors.

@node History, Copying this manual, Errors and omissions, Top
@appendix History of Trasker

@itemize @bullet
@item
The initial system was designed and written by G. Allen Morris III.
@end itemize

I started writing trasker because I hate keeping timesheets. I always saw
Trasker as a client/server based system, because I work on more that one
computer often.

The client/server system does make the system much more complex than
most of the other software that is designed to solve a simular problem.

However I think that then benefits far outway the problems that are
caused by the complexity. And it is possible to run the without out root
permissions, entirely on the local computer.

@node Copying this manual
@appendix Copying this manual
@menu
* GNU Free Documentation License::  How you can copy and share this manual.
@end menu

@include fdl.texi

@bye
