#!/usr/bin/perl
use strict;

use Getopt::Long;
use Pod::Usage;

our $VERSION = "0.0.1";

use TTDB::UserProject;
use TTDB::User;
use TTDB::Project;
use TTDB::Notes;

use Date::Calc::MySQL;

use Data::Dumper;

use TTDB::DBI qw (dbi_setup);

our ($opt_help, $opt_man, $opt_versions, $opt_user);
our $site = 'http://www.gam3.com/tasker';

sub main
{
    my ($year, $week) = @_;

    my $opt_debug   = 0;

    my $date = Date::Calc::MySQL->new( Date::Calc::Monday_of_Week($week-1, $year) );
    $date--;
    my $end_date = Date::Calc::MySQL->new( Date::Calc::Monday_of_Week($week, $year) );
    $end_date--;
print $date, "\n";
print $end_date, "\n";
    GetOptions(
      'debug=i'   => \$opt_debug,
      'help!'     => \$opt_help,
      'man!'      => \$opt_man,
      'versions!' => \$opt_versions,
      'user=s'      => \$opt_user,
    ) or pod2usage(-verbose => 1) && exit;

    pod2usage(-verbose => 1) && exit if ($opt_debug !~ /^[01]$/);
    pod2usage(-verbose => 1) && exit if defined $opt_help;
    pod2usage(-verbose => 2) && exit if defined $opt_man;
    exit if $opt_versions;

    dbi_setup(
	user => 'gam3',
	password => 'awnmwad',
	host => 'localhost',
	database => 'tasker',
    );

    my $project = TTDB::Project->get(id => 1);

    my $up = TTDB::UserProject->new(user => TTDB::User->get(id => 1), project => $project);

    my $p = $up->project;
    my $u = $up->user;

    printf "Week #%d\n", Date::Calc::Week_of_Year($date->date);

    my @ids = (1);

    push @ids, map({ $_->id } $p->children);

    while ($date < $end_date) {
	print $date->strftime("%Y %B %d %A"), "\n";

	for my $time ($u->day(date => $date, pids => \@ids)) {
	    print $time->{data}->{project_id}, ": ";
	    print $time->{data}->{time}, "\n";
	}
	for my $note (TTDB::Notes->new(date => $date)->entries) {
	    print "# Note " . substr($note->text, 0, 150), "\n";
	}

	$date++;
    }
    print "\n";
}

use Date::Parse;

my ($week, $year) = Date::Calc::Week_of_Year( Date::Calc::Today() );
my $date = str2time(join(' ', @ARGV));
print "date: $date\n";

if ($date) {
    print "$date @ARGV\n";
    ($week, $year) = Date::Calc::Week_of_Year( (Date::Calc::Gmtime($date))[0..2] );
    $week--;
    print "$week $year\n";
}
print " $week $year\n";
exit;
main($year, $week);

END {
    if (defined $opt_versions) {
	print
	  "\nModules, Perl, OS, Program info:\n",
	  "  TTDB::User            $TTDB::User::VERSION\n",
	  "  Pod::Usage            $Pod::Usage::VERSION\n",
	  "  Getopt::Long          $Getopt::Long::VERSION\n",
	  "  strict                $strict::VERSION\n",
	  "  Perl                  $]\n",
	  "  OS                    $^O\n",
	  "  $0\t\t$VERSION\n",
	  "  $site\n",
	  "\n\n";
    }
}

__END__

=head1 NAME

 invoice

=head1 SYNOPSIS

  invoice [--week {date} | --start {date} --end {date}] {project, project, ...}

=head1 DESCRIPTION

 Run tasker remotely with email messages.

=head1 ARGUMENTS

  arguments are a list of projects.

  an invoice will be created for each project.

=head1 OPTIONS

=over 5

=item B<--user> I<userid>

Control tasker for this tasker userid.

=item B<--versions>

print Modules, Perl, OS, Program info

=item B<--debug> I<0>

don't print debugging information (default)

=item B<--debug> I<1>

print debugging information

=back

=head1 AUTHOR

G. Allen Morris III <tasker@gam3.net>

=head1 BUGS

None that I know of.

=head1 TODO

We could use more security.

=head1 UPDATES

 2006-10-08   06:22 EST
   Initial working code

=cut

