#!/usr/bin/perl
use strict;

use Getopt::Long;
use Pod::Usage;

our $VERSION = "0.0.1";

use TTDB::UserProject;
use TTDB::User;
use TTDB::Project;
use TTDB::Notes;
use TTDB::Time;

use Date::Calc::MySQL;

use Data::Dumper;

use TTDB::DBI qw (dbi_setup);

our ($opt_help, $opt_man, $opt_versions, $opt_user);
our $site = 'http://www.gam3.com/tasker';

sub main
{
    my ($year, $week) = @_;

    my $opt_debug   = 0;

    my $date = Date::Calc::MySQL->new( Date::Calc::Monday_of_Week($week, $year) );
    $date--;
    my $end_date = Date::Calc::MySQL->new( Date::Calc::Monday_of_Week($week+1, $year) );
    $end_date--;

    GetOptions(
      'debug=i'   => \$opt_debug,
      'help!'     => \$opt_help,
      'man!'      => \$opt_man,
      'versions!' => \$opt_versions,
      'user=s'      => \$opt_user,
    ) or pod2usage(-verbose => 1) && exit;

    pod2usage(-verbose => 1) && exit if ($opt_debug !~ /^[01]$/);
    pod2usage(-verbose => 1) && exit if defined $opt_help;
    pod2usage(-verbose => 2) && exit if defined $opt_man;
    exit if $opt_versions;

    dbi_setup(
	user => 'gam3',
	password => 'awnmwad',
	host => 'localhost',
	database => 'tasker',
    );

    my $up = TTDB::UserProject->new(user => TTDB::User->get(id => 1), project => TTDB::Project->get(id => 1));

    my $p = $up->project;
    my $u = $up->user;

    my $file = sprintf("%s-%04d-w%02d", $p->name, $year, $week);
die "File already exists." if -f $file;
    open(OUT, '> ' . $file);
    printf "Week #%d\n", Date::Calc::Week_of_Year($date->date);

    my @ids = (1);

    push @ids, map({ $_->id } $p->children);

    while ($date < $end_date) {
	print OUT "Date ", $date->strftime("%Y %B %d %A"), "\n";

	for my $time ($u->day(date => $date, pids => \@ids)) {
	    print OUT "\n";
	    print OUT $time->elapsed, "\n";
	}
use Data::Dumper;
	for my $note ( TTDB::Notes->new( date => $date, project_ids => [ $p->all_ids ], )->entries ) {
	    my $name = '';
	    if (my $x = $note->project) {
		$name = $x->name;
	    }
	    print OUT "# Note " . $note->time . " - [$name] - " . substr($note->text, 0, 140), "\n";
	}

	$date++;
    }
    print OUT "\n";
}

use Date::Parse;

my ($week, $year) = Date::Calc::Week_of_Year( Date::Calc::Today() );

my $date;

if (@ARGV) {
    $date = str2time(join(' ', @ARGV));
}

if ($date) {
    print "$date @ARGV\n";
    ($week, $year) = Date::Calc::Week_of_Year( (Date::Calc::Gmtime($date))[0..2] );
    $week--;
    print "$week $year\n";
} else {
    if (@ARGV < 3) {
print "@ARGV\n";
    }
}

use Date::Calc::Object qw (Monday_of_Week Week_of_Year Add_Delta_Days Time_to_Date Day_of_Week);

our @dates;

{
package Date::Calc::Object;
sub as_iso_week
{
    my $date = shift;
    my ($week, $year) = Week_of_Year($date->date), "\n";
    my $dow = Day_of_Week($date->date) - 1;
    $date = $date - $dow;
   
    sprintf("%04d-W%02d-%d\n", $year, $week, $dow);
}
sub bow
{
    my $date = shift;
    my ($week, $year) = Week_of_Year($date->date), "\n";
    my $dow = Day_of_Week($date->date) - 1;
    $date = $date - $dow;
    
    Date::Calc::Object->new(($date->date)[0..2]);
}
}


if (@ARGV) {
    for (@ARGV) {
	if (my $time = str2time($_)) {
	    my $date = Date::Calc::Object->time2date($time);
	    print $date->as_iso_week;
	    push @dates, $date->bow;
	} elsif (my ($y, $ws, $we) = (/(\d{4})-[Ww](\d+)-[Ww](\d+)$/)) {
	    my $date = Date::Calc::Object->new(Monday_of_Week($ws, $y));
	    my $c = $we - $ws + 1;
	    while ($c--) {
		push @dates, $date;
		$date += 7;
	    }
	} elsif (my ($y, $ws, $c) = (/(\d{4})-[Ww](\d+)-(\d+)$/)) {
	    my $date = Date::Calc::Object->new(Monday_of_Week($ws, $y));
	    while ($c--) {
		push @dates, $date;
		$date += 7;
	    }
	} elsif (my ($y, $w) = (/(\d{4})-[Ww](\d+)$/)) {
	    my $date = Date::Calc::Object->new(Monday_of_Week($w, $y));
	    push @dates, $date;
	} else {
	    die "Did not recognize $_";
	}
    }
} else {
    my $date = Date::Calc->now();
    my $dow;
    $date -= 7;
    my ($week, $year) = Week_of_Year($date->date), "\n";
    $dow = Day_of_Week($date->date) - 1;
    $date = $date - $dow;
    printf("%04d-W%02d-%d\n", $year, $week, $dow);
    push @dates, Date::Calc::Object->new(($date->date)[0..2]);
}

for my $date (@dates) {
    my ($week, $year) = Week_of_Year($date->date), "\n";
    print STDERR "invoice for week $week $year\n";

    main($year, $week);
}

print "\n";

END {
    if (defined $opt_versions) {
	print
	  "\nModules, Perl, OS, Program info:\n",
	  "  TTDB::User            $TTDB::User::VERSION\n",
	  "  Pod::Usage            $Pod::Usage::VERSION\n",
	  "  Getopt::Long          $Getopt::Long::VERSION\n",
	  "  strict                $strict::VERSION\n",
	  "  Perl                  $]\n",
	  "  OS                    $^O\n",
	  "  $0\t\t$VERSION\n",
	  "  $site\n",
	  "\n\n";
    }
}

__END__

=head1 NAME

 invoice

=head1 SYNOPSIS

  invoice --project project [date [date ...]]

=head1 DESCRIPTION

  generate an invoice for a week

=head1 ARGUMENTS

  arguments are a list of projects.

  an invoice will be created for each date

=head1 OPTIONS

=over 5

=item B<--user> I<userid>

Control tasker for this tasker userid.

=item B<--project> I<project name>

=item B<--versions>

print program version

=back

=head1 AUTHOR

G. Allen Morris III <tasker@gam3.net>

=head1 BUGS

None that I know of.

=head1 TODO

We could use more security.

=head1 UPDATES

 2006-10-08   06:22 EST
   Initial working code

=cut

