#!/usr/bin/perl
use strict;

use Time::HiRes qw (time);

use Getopt::Long;
use Pod::Usage;

our $VERSION = "0.0.1";

use TTDB::User;
use TTDB::Project;
use TTDB::UserProject;
use TTDB::Notes;
use TTDB::Time;

use Date::Calc::MySQL;
use Date::Calc qw (Week_of_Year Day_of_Week Monday_of_Week);
use Date::Parse;

use TTDB::DBI qw (dbi_setup);

our ( $opt_help, $opt_man, $opt_versions );
our ( $opt_user, $opt_project );
our ( $opt_debug, $opt_help, $opt_man, $opt_versions );

our $site = 'http://www.gam3.com/tasker';

use File::Find::Object;
use File::Basename;

use Data::Dumper;

use YAML qw (LoadFile);

sub main
{
    my ($year, $week) = @_;

    my $opt_debug   = 0;

    my $date = Date::Calc::MySQL->new( Date::Calc::Monday_of_Week($week, $year) );
    $date--;
    my $end_date = Date::Calc::MySQL->new( Date::Calc::Monday_of_Week($week+1, $year) );
    $end_date--;

    my $up = TTDB::UserProject->new(user => TTDB::User->get(user => $opt_user), project => TTDB::Project->get(name => $opt_project));

    my $p = $up->project;
    my $u = $up->user;

    my $file = sprintf("%s-%04d-w%02d.data", $p->name, $year, $week);
die "File $file already exists." if -f $file;
    open(OUT, '> ' . $file);
    printf "Week #%d\n", Date::Calc::Week_of_Year($date->date);

    my @ids = (1);

    push @ids, map({ $_->id } $p->children);

    while ($date < $end_date) {
	print OUT "Date ", $date->strftime("%Y %B %d %A"), "\n";

	for my $time ($u->day(date => $date, pids => \@ids)) {
	    print OUT "\n";
	    print OUT $time->elapsed, "\n";
	}
use Data::Dumper;
	for my $note ( TTDB::Notes->new( date => $date, project_ids => [ $p->all_ids ], )->entries ) {
	    my $name = '';
	    if (my $x = $note->project) {
		$name = $x->name;
	    }
	    print OUT "# Note " . $note->time . " - [$name] - " . substr($note->text, 0, 140), "\n";
	}

	$date++;
    }
    print OUT "\n";
}

my $conf_file;

GetOptions(
    'debug'       => \$opt_debug,
    'help!'       => \$opt_help,
    'man!'        => \$opt_man,
    'versions!'   => \$opt_versions,
    'configure=s' => \$conf_file,
    'user=s'      => \$opt_user,
    'project=s'   => \$opt_project,
) or pod2usage(-verbose => 1) && exit;

#pod2usage(-verbose => 1) && exit if ($opt_debug !~ /^[01]$/);
pod2usage(-verbose => 1) && exit if defined $opt_help;
pod2usage(-verbose => 2) && exit if defined $opt_man;

$conf_file ||= $ENV{HOME} . '/.tasker/conf';
my $cntrl_hash = LoadFile($conf_file);

dbi_setup(
    database => $cntrl_hash->{database}{name} || 'tasker',
    user => $cntrl_hash->{database}{user} || 'tasker',
    password => $cntrl_hash->{database}{password} || '',
);

my $user_name = $ENV{USER};

$opt_user = $user_name;

my $user = TTDB::User->get(user => $user_name);

my @dates;

if (@ARGV) {
    my $dow;
    for (@ARGV) {
	if (my $time = str2time($_)) {
	    my $date = Date::Calc::Object->time2date($time);
	    my ($week, $year) = Week_of_Year($date->date), "\n";
	    $dow = Day_of_Week($date->date) - 1;
	    $date = $date - $dow;
	    printf("%04d-W%02d-%d\n", $year, $week, $dow);
	    push @dates, Date::Calc::Object->new(($date->date)[0..2]);
	} elsif (my ($y, $ws, $we) = (/(\d{4})-[Ww](\d+)-[Ww](\d+)$/)) {
	    my $date = Date::Calc::Object->new(Monday_of_Week($ws, $y));
	    my $c = $we - $ws + 1;
	    while ($c--) {
		push @dates, $date;
		$date += 7;
	    }
	} elsif (my ($y, $ws, $c) = (/(\d{4})-[Ww](\d+)-(\d+)$/)) {
	    my $date = Date::Calc::Object->new(Monday_of_Week($ws, $y));
	    while ($c--) {
		push @dates, $date;
		$date += 7;
	    }
	} elsif (my ($y, $w) = (/(\d{4})-[Ww](\d+)$/)) {
	    my $date = Date::Calc::Object->new(Monday_of_Week($w, $y));
	    push @dates, $date;
	} elsif (my ($w) = (/^[Ww](\d+)$/)) {
	    my $y = Date::Calc->today->year;
	    my $date = Date::Calc::Object->new(Monday_of_Week($w, $y));
	    push @dates, $date;
	} else {
	    die "Did not recognize $_";
	}
    }
} else {
    my $date = Date::Calc->now();
    my $dow;
    $date -= 7;
    my ($week, $year) = Week_of_Year($date->date), "\n";
    $dow = Day_of_Week($date->date) - 1;
    $date = $date - $dow;
    printf("%04d-W%02d-%d\n", $year, $week, $dow);
    push @dates, Date::Calc::Object->new(($date->date)[0..2]);
}

for my $date (@dates) {
    my ($week, $year) = Week_of_Year($date->date), "\n";
    print STDERR "invoice for week $week $year\n";

    main($year, $week);
}


END {
    if (defined $opt_versions) {
	print
	  "\nModules, Perl, OS, Program info:\n",
	  "  TTDB::User            $TTDB::VERSION\n",
	  "  Date::Parse           $Date::Parse::VERSION\n",
	  "  Pod::Usage            $Pod::Usage::VERSION\n",
	  "  Getopt::Long          $Getopt::Long::VERSION\n",
	  "  strict                $strict::VERSION\n",
	  "  Perl                  $]\n",
	  "  OS                    $^O\n",
	  "  $0\t\t$VERSION\n",
	  "\n",
	  "  $site\n",
	  "\n\n";
    }
}

__END__

=head1 NAME

invoice - Output the data for a weekly invoice

=head1 SYNOPSIS

B<invoice> [I<options>]

=head1 DESCRIPTION

B<invoice> is a utility that outputs a datafile of invoice information

=head1 OPTIONS

=over 5

=item B<--start> I<date>

When given, Gaim logfiles starting on this date will be put into the database. This defaults to the previous day.

=item B<--end> I<date>

When given, Gaim logfiles after this date will be ignored. This defaults to the previous day.
Many date formats can be used.

=item B<--user> I<userid>

This is the tasker user that will be used.

=item B<--project> I<prjectid>

This is the tasker project that will be used.

=item B<--config>=I<DIR>

Use I<DIR> as the directory for config files instead of I<~/.tasker>.

=item B<--help>

Print help text and exit.

=item B<--version>

Display version information.

=back

=head1 FILES

I<~/.tasker/conf>: information needed to connect to the database.

=head1 SEE ALSO

I<http://tasker.gam3.net/>

L<Date::Parse>

=head1 AUTHOR

G. Allen Morris III <tasker@gam3.net>

=head1 BUGS

None that I know of.

=head1 TODO

The data in I<~/.tasker/gaim> in the database.

=head1 UPDATES

 2007-01-28   06:22 EST
  Clean up

 2006-10-08   06:22 EST
   Initial working code

=cut

