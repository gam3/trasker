#!@PERL_PATH@

=head1 NAME

 traskerd - The Trasker Perl Server

=head1 SYNOPSIS

 traskerd --config /etc/trasker.conf

=head1 DESCRIPTION

 eg:
   tskserver.pl
   tskserver --server=tskserver

=head1 OPTIONS

 --config {file}  defaults to /etc/trasker.conf

 --versions       print Modules, Perl, OS, Program info
 --debug 0        don't print debugging information (default)
 --debug 1        print debugging information

 --help           print Options and Arguments instead
 --man            print complete man page

=cut

use strict;
use warnings;
use POSIX ;
use Socket;
use IO::Socket;
use IO::Socket::SSL;
use IO::Select;
use Params::Validate qw (validate);
use Config::Simple;
use Log::Dispatch;
use Date::Format qw();

use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK O_NDELAY);

use Net::TCPwrappers qw(RQ_DAEMON RQ_FILE request_init fromhost hosts_access);

use  Log::Dispatch::Syslog;
use  Log::Dispatch::Screen;

use Getopt::Long;            # support options+arguments
use Pod::Usage;              # avoid redundant &Usage()

use Trasker::TTDB::DBI qw (dbi_setup);
use Trasker::Date;
use Trasker::TTDB::Authorize;
use Trasker::TTDB::User;
use Trasker::TTDB::Project;
use Trasker::TTDB::Authorize;
use Trasker::TTDB::TimeSlice;
use Sys::Hostname;

my $done=0;
my $select;
my $server;
my $sslserver;
my $connections=0;

our $progname = 'traskerd';

sub OpenMax {
    my $openmax = POSIX::sysconf( &POSIX::_SC_OPEN_MAX );
    (!defined($openmax) || $openmax < 0) ? 64 : $openmax;
}

our $HOSTNAME = hostname;
our $ME = $0; $ME =~ s|.*/||;

our $indie = 0;
our $inwarn = 0;
our $log = new Log::Dispatch(
    callbacks => sub {
        if ($indie) {
	    return "indie $indie";
	}
        my %h = @_;
        return Date::Format::time2str('%B %e %T', time)." ".$HOSTNAME." $ME\[$$]: " . $h{message} . "\n";
    }
);
$log->add( Log::Dispatch::Syslog->new( name => 'trasker', min_level => 'info' ));
$log->add( Log::Dispatch::Screen->new( name => 'trasker', min_level => 'info' ));

$SIG{'__DIE__'} = sub { $log->critical("DIE: @_") unless ($indie++); $indie--; die @_; };
$SIG{'__WARN__'} = sub { $log->warning("WARN: @_") unless ($inwarn++); $inwarn--; warn @_; };
#$log->warning("Starting Process:  " . $$);

sub print_log {
    $log->alert( @_ );
}

sub nonblock
{
    my $socket = shift;
    my $flags;
print_log join(' ', caller) unless $socket;
    return unless $socket;
    $flags = fcntl($socket, F_GETFL, 0)
        or print_log "Can't get flags for socket: $!\n";
    fcntl($socket, F_SETFL, $flags | O_NONBLOCK)
        or print_log "Can't make socket nonblocking: $!\n";
}

################################################################################

our $hash = {};
our $datahash = {};

our $time_count;

our $opt_config = "/etc/trasker.conf";
our $opt_debug;
our $opt_help;
our $opt_man;
our $opt_versions;

sub get_user
{
    my $userid = shift or die 'Need a user';
    my $client = shift or die 'Need a client';
    my $user;
    my $client_key = overload::StrVal $client;

    my $a = $hash->{'_clients'}{$client_key}{authorized};
    unless ($a && $a->ok) {
        die "You must be authorized.";
    }

    if ($hash->{_user}{$userid}{user}) {
	$user = $hash->{_user}{$userid}{user};
    }
    unless ($user) {
	$user = Trasker::TTDB::User->get(user => $userid);
	$hash->{_user}{$userid}{user} = $user;
    }
    $user;
}

=head1 API

The first step is that the server sends a version number;

The client should then authorize the user.

=cut

our $cmd_hash = {
# Global
    'authorize' => \&authorize,		# get authorization for client
    'user' => \&user,
    'recentprojects' => \&recent_projects,
    'recentProjects' => \&recent_projects,
    "clients" => \&clients,		# list clients
    "nop" => \&nop,
    "ping" => \&ping,
    "host" => \&host,
    "help" => \&help,
    "now" => \&now,
    "quit" => \&quit,

# cache control
    "update" => \&update,

# debuging
    "dumper" => \&dumper,

# Auto Select
    "addauto"=> \&addauto,
    "getauto" => \&getauto,
    "setauto"=> \&setauto,

    "selects"=> \&selects,

# Tracking
    "tracker" => \&tracker,
    "xtracker" => \&xtracker,
    "change" => \&change,		# change current project
    "track" => \&track,

# Tasks
    "addtask" => \&addtask,		# add a task for a user

# Notes
    "note" => \&notex,
    "notes" => \&notes,

# Alerts
    "addalert" => \&add_alert,
    "updatealert" => \&update_alert,
    "alerts" => \&alerts,
    "alert" => \&alert,

# Timeslices

    "gettime" => \&gettime,
    'times' => \&times,
    'timeedit' => \&timeedit,
    'timemove' => \&timemove,
    'timesplit' => \&timesplit,
};

sub OK { 'OK' };
sub QUIT { 'QUIT' };

sub dumper
{
    my $client = shift;

    require Trasker::TTDB;

    use Data::Dumper;
    warn Dumper $hash;

    return OK;
}

sub now
{
    my $client = shift;

    require Trasker::TTDB;

    printf $client "now\t%s\n", Trasker::TTDB::now();
}

=head2 Authorization

=head3 authorize

  authorize {user/password}

This command must be run to get permitions to use most other
commands.

=cut

sub authorize
{
    my $client = shift;
    my $data = shift;
    my $user = shift;

    my @part = split('/', $user);
    my $ok = 0;
    my $client_key = overload::StrVal $client;

    if ($hash->{'_clients'}{$client_key}{authorized}) {
	printf $client "error Can't reauthorized %s\n", $part[0];
    } else {
	if (@part == 2) {
	    my $a = $hash->{'_clients'}{$client_key}{authorized} = Trasker::TTDB::Authorize->authorize(login => $part[0], password => $part[1]);
	    $ok = $a->ok();
	}
	if ($ok) {
	    printf $client "authorized\t%s\tOK\n", $part[0];
	} else {
	    sleep(2);
	    printf $client "notauthorized\t%s\n", $part[0];
	}
    }
    return OK;
}

=head2 Miscellaneous

=head3 nop

 nop

This command does nothing

=cut

sub nop
{
    my $client = shift;
    my $data = shift;

    print($client "nop " . join(' ', @_), "\n") if @_;
}

=head3 ping

 ping

This command sends the string C<pong> back to the client.

=cut

sub ping
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;

    printf($client "pong\n");
}

=head3 notex

This addes a note to the database with the current time. It is attached
to a project.  Project 0 being a global project.

=over

=item note {I<user>} {I<project_id> | 0} {I<string>}

replies with

=item accept_note OK

=back

=cut

sub notex
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $project_id = shift;
    my $note = shift;

    my $userobj = get_user($user, $client);
    my $noteobj;

    if ($project_id) {
	$noteobj = $userobj->project(id => $project_id);
    } else {
	$noteobj = $userobj;
    }

    if ($noteobj->add_note(note => $note)) {
	printf($client "accept_note\tOK\n");
    } else {
	printf($client "error\tCould not add note.\n");
    }
}

=head3 help

 help

This command prints a short help message.

=cut

sub help()
{
    my $client = shift;
    my $extra = shift;
    my $cmd = shift;

    if ($cmd) {
	printf($client <<EOP, $cmd);
 No help for %s
EOP
    } else {
    # make sure that each line starts with whitespace.
	print($client <<EOP);

 authorize\t"user/passprase"
 help\t[command]

 You may need to authorize before you can use the folloing commands:

 user\t{username}
 track\t{username} [on|off]

 addauto

 addtask

 change\t{user}\t{project id} - change the current project for user
 clients
 desktop
 getauto
 gettime
 nop
 note
 notes
 ping
 project
 quit
 selects
 setauto
 times
 tracker
 track
 update
 user
 xtracker
EOP
    }
    '';
}

=head3 host

 host <TAB> I<host identification>

=cut

sub host()
{
    my $client = shift;

    print($client "host\tuser\@host:vt\n");
}

=head3 quit

Have the server close the connection to the client

  quit

=cut

sub quit
{
    my $client = shift;
    print($client "Bye, bye.\n");
    QUIT;
}

=head2 Information

This group of commands help gather and track infomation about a user
or group.

=head3 user

 user {user}

get times and follow {user}.

=cut

sub user
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;
    my $count = 0;

    my $user = get_user($userid, $client);

    my $client_key = overload::StrVal $client;

    if (!exists $hash->{_clients}{$client_key}{_list}{$user->name}) {
	$hash->{_clients}{$client_key}{_list}{$user->name} = $user;

	for my $entry ($user->projects) {
	    my $time = $entry->time;
	    my $atime = $entry->alltime;
	    $count++;
	    printf($client "entry\t%s\t%s\t%d\t%d\t%s\t%s\t%s\n",
		   $userid,
		   $entry->project->name,
		   $entry->project->id,
		   $entry->project->parent_id,
		   $time, $atime,
		   $entry->active
	    );
	}
    }
    if ($count) {
	if (my $current_proj = $user->current_project()) {
	    printf($client "current\t%s\t%d\n", $userid, $current_proj->project->id);
	}
    } else {
	printf($client "current\t%s\t%d\n", $userid, 0);
    }
    undef;
}

=head3 track

Follow the focus

  track {user}

=cut

sub track
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $state = shift;

    my $client_key = overload::StrVal $client;

    if ($hash->{_clients}{$client_key}{_track_}{$user} eq 'on') {
	print $client "Already tracking\n";
    } else {
	$hash->{_clients}{$client_key}{_track_}{$user} = 'on';
	$hash->{_user}{$user}{_track_}{$client_key} = $client;
	print $client "tracking $user\n";
    }
    '';
}

=head3 gettime

 gettime user projectId

Get times for a given project

 returns:
  update_time user projectId time all_time

=cut

sub gettime
{
    my $client = shift;
    my $data = shift;
    my $user_id = shift;
    my $id = shift;

    die "$user_id Bad id: $id" unless ($id =~ m/^\d+$/);

    my $user = get_user($user_id, $client);

    my $time;
    my $atime;

    my $project = $user->project(id => $id);

    eval {
	$time = $project->time();
	$atime = $project->alltime();
    }; if ($@) {
        warn "ID: $user_id $id ", $@;
	return '';
    }

    printf($client "update_time\t%s\t%d\t%s\t%s\n", $user_id, $id, $time, $atime);
    undef;
}

=head3 times

 times user day

Return the timeslices for the given day

day is in the format I<yyyy-mm-dd>.

=cut

sub times
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;
    my $date = shift;

    my $user = get_user($userid, $client);
    my $time = Trasker::Date->today();

    if ($date) {
        $time = Trasker::Date->new($date);
    }
    my @times = $user->get_timeslices_for_day(date => $time);

    for my $ts (@times) {
	printf($client qq(timeslice\t%s\t%d\t%d\t%d\t%s\t%s\t%s\n),
	    $userid,
	    $ts->id,
	    $ts->project_id,
	    $ts->auto_id // '000',
	    '"' . $ts->from . '"',
	    $ts->start_time->mysql,
	    $ts->duration);
    }
#    printf($client qq(timeslice_done\n));
}

=over

=item timesplit

  timesplit user timeslice_id {time | +duration | -duration}

=back

=cut

sub timesplit
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;
    my $timeslice_id = shift;
    my $date = shift;
    die "bad usage" if (@_);

    my $time;

    my $user = get_user($userid, $client);
    my $tdate = Trasker::Date->new($date);
    if ($tdate) {
        $date = $tdate;
    }
warn $date;
    my $tsl = $user->timesplit(
	timeslice_id => $timeslice_id,
	time => $date,
    );
# FIXME 
    if ($tsl->count > 1) {
	foreach my $ts ($tsl->entry) {
	    printf($client qq(timeslice\t%s\t%d\t%d\t%d\t%s\t%s\t%s\n),
		$userid,
		$ts->id,
		$ts->project_id,
		$ts->auto_id,
		'"' . $ts->from . '"',
		$ts->start_time->mysql,
		$ts->duration);
	}
    } else {
    }
}


=head3 notes

This addes a note to the database with the current time. It is attached
to a project.  Project 0 being a global project.

=over

=item notes {I<user>} {I<projectId>} day [day]

=back

=cut

sub notes
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $project_id = shift;
    my $time = shift;

    my $userobj = get_user($user, $client);
    my $project;

    if ($project_id) {
	$project = $userobj->project(id => $project_id);
    } else {
	$project = $userobj;
    }

    my @notes = $project->get_notes();

    for my $note (@notes) {
	printf($client "note\t%d\t%s\n", $note->id, $note->text);
    }
}

=head3 selects

=over

=item selects {I<user>} {I<projectId>} day [day]

returns

=item autoselect {user} {id} {project_id} {host} {name} {class} {role} {title} {desktop}

=back

=cut

sub selects
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $project_id = shift;
    my $time = shift;

    my $userobj = get_user($user, $client);
    my $project;

    if ($project_id) {
	$project = $userobj->project(id => $project_id);
    } else {
	$project = $userobj;
    }

    my @selects = $project->get_selects();

    for my $select (@selects) {
	printf($client "autoselect\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	    $userobj->name,
	    $select->id,
	    $select->project_id,
	    $select->host,
	    $select->name,
	    $select->class,
	    $select->role,
	    $select->title,
	    $select->desktop,
	);
    }
}

=head3 clients

=cut

=head2 Tasks

=head3 addtask

 addtask user projectId a user, parent_id name description

Create a new task for the user.

=cut

sub addtask
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $project_id = shift;

    my ($a, $userx, $parent_id, $name, $description) = split('\t', $data);

    warn "$name: $description";
    warn "$data";

    my $userobj = get_user($user, $client);

    my $userproj;

    if ($parent_id) {
	$userproj = $userobj->project(id => $parent_id);
    } else {
die;
	$userproj = $userobj;
    }

    if (my $up = $userproj->add_task(
	name => $name,
	description => $description)
       ) {
	printf($client "accept_task\tOK\n");

	printf($client "entry\t%s\t%s\t%d\t%d\t%s\t%s\t%s\n",
	       $user,
	       $up->project->name,
	       $up->project->id,
	       $up->project->parent_id,
	       '0:00:00', '0:00:00',
	       $up->active
	);
    } else {
	printf($client "error\tCould not add project.\n");
    }
    return undef;
}


=head3 getauto

  getauto userid projectid

replies with a list of autoselects for the given user/project

   auto gam3 20081 102 host name class role desktop title  normal

=cut

sub getauto()
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;

    my $project_id = shift;

    my $user = get_user($userid, $client);
    my $project = $user->project(id => $project_id);

    for my $auto ($project->get_all_auto()) {
        printf("auto %d\n", $auto->id);
        printf($client "auto\t%s\t%d\t%d\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	    $user->name,
	    $auto->id,
	    $auto->project_id,
	    $auto->host,
	    $auto->name,
	    $auto->class,
	    $auto->role,
	    $auto->desktop,
	    $auto->title,
	    $auto->state,
	    $auto->enabled,
	);
    }

    '';
}

=head3 addauto

 addauto user projectId host class name role title desktop [flag]

Add an auto select filter to the auto database.

Duplicate entries will cause the project to be changed unless
flag is 'nodup'.

responds with I<accept_select OK>

=cut

sub addauto()
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;
    my $project_id = shift;

    print $client "addauto: Need 6 arguments (" . join(' ', @_) . ")\n" unless @_ == 6;

    my $user = get_user($userid, $client);

    my $host = shift;
    my $class = shift;
    my $name = shift;
    my $role = shift;
    my $title = shift;
    my $desktop = shift;

    my $project = $user->project(id => $project_id);

    $project->new_auto(
		    host => $host,
		    desktop => $desktop,
		    class => $class,
		    name => $name,
		    role => $role,
		    title => $title,
		   );

    print($client "accept_select\tOK\n");
}

=head3 setauto

=over

=item setauto userid host class name role title desktop

=back

=cut

sub setauto()
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;

    print $client "setauto: Need 6 arguments (" . join(' ', @_) . ")\n" unless @_ == 6;

    my $user = get_user($userid, $client);

    my $host = shift;
    my $class = shift;
    my $name = shift;
    my $role = shift;
    my $title = shift;
    my $desktop = shift;

    if (my $pid = $user->auto_set_project(
		    host => $host,
		    desktop => $desktop,
		    class => $class,
		    name => $name,
		    role => $role,
		    title => $title,
		   ))
    {
	print_log "OK\n";
    }
    else {
	print_log "FAIL\n";
    }
}


=head2 Control

The following commands are used to track the actions of a user or resource.

=head3 change

=over

=item change {user} {projectId}

Change the current project for user to projectid.

This sets the default project for the user. This will clear the
project stack. This is normally used by a user interface to change the
current project.

=back

=cut

sub change
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $project_id = shift;
    my $peername = $client->peername;
    my ($port, $iaddr) = sockaddr_in($peername);
    my $host = gethostbyaddr($iaddr, AF_INET);

    my $userobj = get_user($user, $client);
    my $project = Trasker::TTDB::Project->get(id => $project_id);

    $userobj->set_current_project(project => $project, host => $host);
    update_user($userobj);
}

=head3 timeedit

=over

=item timeedit {user} {timesliceid} {new projectid} {old projectid}

Change the project for a timeslice to projectid.

This is allows old timeslices to be edited. This is will fail if the
timeslice is 'closed' or you don't supply the correct current project
id. These may happen if an invoice has been issued or if you or someone
else is editing the timeslice from somewhere else.

On success 3 commands are issued:

   timeslice timesliceid
   entry projectid
   entry new_projectid

and if it the current project that was changed

   current new_projectid

=back

=cut

sub timeedit
{
    my $client = shift;
    my $data = shift;
    my $user_id = shift;
    my $timeslice_id = shift;
    my $new_project_id = shift;
    my $project_id = shift;

    my $user = get_user($user_id, $client);

    my $ots = Trasker::TTDB::TimeSlice->get(id => $timeslice_id, user_id => $user->id);

    Trasker::TTDB::TimeSlice->update(id => $timeslice_id, project_id => $new_project_id, old_project_id => $project_id);

    my $ts = Trasker::TTDB::TimeSlice->get(id => $timeslice_id, user_id => $user->id);

    my $client_key = overload::StrVal $client;

    for my $client_key (keys %{$hash->{_clients}}) {
	my $uclient = $hash->{_clients}{$client_key}{client};
	printf($uclient qq(timeslice\t%s\t%d\t%d\t%d\t%s\t%s\t%s\n),
	    $user->name,
	    $ts->id,
	    $ts->project_id,
	    $ts->auto_id,
	    '"' . $ts->from . '"',
	    $ts->start_time->mysql,
	    $ts->duration);
	for my $entry ($user->project(id => $project_id), $user->project(id => $new_project_id)) {
	    my $time = $entry->time;
	    my $atime = $entry->alltime;

	    printf($uclient "entry\t%s\t%s\t%d\t%d\t%s\t%s\t%s\n",
		   $user->name,
		   $entry->project->name,
		   $entry->project->id,
		   $entry->project->parent_id,
		   $time, $atime,
		   $entry->active
	    );
	}
	if ($ts->current) {
printf($uclient "current\t%s\t%d\n", $user->name, $new_project_id);
	    printf($uclient "current\t%s\t%d\n", $user->name, $new_project_id);
	}
    }
}

=head3 timemove

=over

=item timemove {user} {timesliceid} {time}

Change the start time for a timeslice.

This is allows old timeslices to be edited. This is will fail if the
timeslice is 'closed' or you don't supply the correct current project
id. These may happen if an invoice has been issued or if you or someone
else is editing the timeslice from somewhere else.

On success 3 commands are issued:

   timeslice {previous_timesliceid}
   timeslice {current_timesliceid}
   entry projectid


If you would like to move the end time of a project use split or change
the start time of the next timeslice.

=back

=cut

sub timemove
{
    my ($client, $data, $user_id, $timeslice_id, $new_time, $old_time, $extra) = @_;

    die "too many arguments" if defined $extra;
    die "too few arguments" unless defined $new_time;

    my $user = get_user($user_id, $client);

    my $ts = Trasker::TTDB::TimeSlice->get(id => $timeslice_id, user_id => $user->id);

    my $time = Trasker::Date->new($new_time);
    my @ts = $ts->change_time(new_time => $time);

    if ($ts) {
        my $project;
        for my $ts (@ts) {

	    for my $client_key (keys %{$hash->{_clients}}) {
		my $uclient = $hash->{_clients}{$client_key}{client};

		printf($uclient qq(timeslice\t%s\t%d\t%d\t%d\t%s\t%s\t%s\n),
		    $user->name,
		    $ts->id,
		    $ts->project_id,
		    $ts->auto_id,
		    '"' . $ts->from . '"',
		    $ts->start_time->mysql,
		    $ts->duration);

		my $project_id = $ts->project_id;
		if (my $project = Trasker::TTDB::Project->get(id => $project_id)) {
		    my $time = $project->time;
		    my $atime = $project->alltime;

		    printf($uclient "entry\t%s\t%s\t%d\t%d\t%s\t%s\t%s\n",
			   $user->name,
			   $project->name,
			   $project->id,
			   $project->parent_id,
			   $time, $atime,
			   $project->active
		    );
		}
	    }
	}
    } else {
	printf($client qq(Timeslice %d not found.), $timeslice_id);
    }
}

=head3 tracker

=over

=item tracker {user} {host} {idle} {desktop} {window} {host} {name} {class} {role} {title} {from_id}

=back

=cut

sub tracker
{
    my $client = shift;
    my $data = shift; # data
    my $userid = shift;
    my ($host1, $idle, $desktop, $window, $host, $name, $class, $role, $title) = @_;

    my $user = get_user($userid, $client);

    if ($opt_debug) {
        print_log(sprintf("%s %s dsk %s win %s host (%s) name (%s) class (%s) role (%s) title (%s)\n",
               $host1, $idle, $desktop, $window, $host, $name, $class, $role, $title));
    }

    if ($idle) {
print_log "idle\n";
        if (my $pid = $user->auto_revert_project(
                                                 host => $host,
                                                 desktop => $desktop,
                                                 class => $class,
                                                 title => $title,
                                                 name => $name,
                                                 role => $role,
                                                )
           ) {
            update_user($user);
            printf $client "OK revert %d\n", $pid;
        } else {
print_log "idle NOK\n";
        }
    } else {
        if (my $pid = $user->auto_set_project(host => $host,
                                              desktop => $desktop,
                                              class => $class,
                                              title => $title,
                                              name => $name,
                                              role => $role,
                                             )
           ) {
            printf $client "tracker\tOK\tset\t%d\n", $pid;
            update_user($user);
        } else {
print_log "set NOK\n";
        }
    }

    return OK;
}

sub xtracker
{
    my $client = shift;
    shift; # data
    my $user = shift;

    for my $clientk (keys %{$hash->{_user}{$user}{_track_}}) {
        if (exists $hash->{_clients}{$clientk}) {
	    my $oclient = $hash->{_clients}{$clientk}{client};
	    print($oclient "Tracker ", join(' ', @_), "\n");
	} else {
	    warn "cleanup error";
	    delete $hash->{_user}{$user}{_track_}{$clientk};
	}
    }
    return OK;
}

sub add_alert
{
    my $client = shift;
    print($client "error\tadd_alert is not implimented ", join(' ', @_), "\n");
}

sub update_alert
{
    my $client = shift;
    print($client "error\tupdate_alert is not implimented ", join(' ', @_), "\n");
}

sub alert
{
    my $client = shift;
    print($client "error\talert is not implimented ", join(' ', @_), "\n");
}

=head3 alerts

This returns a list of alerts

=over

=item alerts {I<user>}

=back

=cut

sub alerts
{
    my $client = shift;
    my $data = shift;
    my $user = shift;
    my $stime = shift | '';
    my $etime = shift | '';

    my $userobj = get_user($user, $client);

    my @alerts = $userobj->get_alerts();

    for my $alert (@alerts) {
        printf($client "alertentry\t%d\t%s\n", $alert->id, $alert->title);
#                       alert\t11\tgam3\tThis is an alert\n
    }
}

sub get_clients_for
{
    my $name = shift;
    my $user = shift;

    grep({ $_->{$name}{$user->name} } map({ $hash->{_clients}{$_} } %{$hash->{_clients}}));
}

sub update
{
    my $client = shift;

    for my $clientd (map({ $hash->{_clients}{$_} } keys %{$hash->{_clients}})) {
        my $cli = $clientd->{client};
        printf($cli "update\n");
    }
}

sub update_user
{
    my $user = shift;
    die 'Bad user: ', join(' ', caller) unless $user->isa('Trasker::TTDB::User');

    my $user_project = $user->current_project();
    my $user_name = $user->name;

    my $id = $user_project->project->id;

    my @clients = get_clients_for('_list', $user);

    $hash->{'_current'} = $id;

    for my $chash (@clients) {
        my $cli = $chash->{client};

        print($cli "current\t$user_name\t$id\n");
    }
}

sub recent_projects
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;

    my $user = get_user($userid, $client);

    my $response = $user->recent_projects();

    my $count = 0;
    my $max = @{$response->{projects}};

    printf($client "recentprojects\t%s\t%s\n", $user->name, join("\t", @{$response->{projects}}));
    for my $p (@{$response->{projects}}) {
        printf($client "recentproject\t%s\t%d\t%d\t%d\n", $user->name, $p, $count++, $max);
    }
}

sub clients
{
    my $client = shift;
    my $data = shift;
    my $userid = shift;

    my $user = get_user($userid, $client);

    for my $uclient (keys %{$hash->{_clients}}) {
        print($client "client $uclient\n");
    }
}

# '/home/gam3/demoCA/private/cakey.pem', '/home/gam3/demoCA/cacert.pem',

our $key_file = '/etc/trasker/trasker_key.pem';
our $crt_file = '/etc/trasker/trasker_cert.pem';

sub main
{
    $| = 1;
    $done=0;

    my $cfg = Config::Simple->new($opt_config);
    die "No configuration file: $opt_config" unless $cfg;

    {
	my $dbhash = $cfg->get_block('database');

	dbi_setup(
	    %$dbhash
	);
    }
    for my $sig (keys %SIG) {
        next if $sig eq 'TSTP';
        next if $sig eq 'WINCH';
        $SIG{$sig} = sub { print_log('Signal '.$_[0].' caught!'); };
    }

    $SIG{__WARN__} = sub { print_log('WARNING: ' . $_[0]); };
    $SIG{__DIE__} = sub { print_log('DIE: ' . $_[0]); };
    $SIG{PIPE} = 'IGNORE';
    $SIG{INT} = $SIG{TERM} = $SIG{QUIT} = $SIG{ABRT} = sub { $done = 1; };

    daemonize() unless $opt_debug;

    $server = IO::Socket::INET->new(LocalPort => 8000,
                    Listen => 10,
                    Proto => "TCP",
                    ReuseAddr => 1,
                    )
        or die "Can't create a server socket: $@";
    if (0) {
	$sslserver = IO::Socket::SSL->new(
			LocalPort => 8001,
			Listen => 10,
			Proto => "TCP",
			ReuseAddr => 1,
			SSL_key_file => $key_file,
			SSL_cert_file => $crt_file,
			)
	    or die "Can't create a server socket: $@";
    }
    setsockopt($server,SOL_SOCKET,SO_LINGER,pack("l*",0,0)) || return undef;
    nonblock($server);
    $select = IO::Select->new();
    $select->add($server);
    $select->add($sslserver) if (defined $sslserver);

    print_log "Started";

    my $line_count;
    my $x = 0;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
    while (!$done) {
        my $client;
        my $rv;
        my $data;
        my $ssl = 0;

        foreach $client ($select->can_read(1)) {
            if ($client == $server || ($sslserver && $client == $sslserver)) {
                if ( $connections < 10 ) {
                    if ($sslserver && $client == $sslserver) {
                        $client = $sslserver->accept();
                        $ssl = 1;
print_log "accept $client\n";
                    } else {
                        $client = $server->accept();
                    }
                    next unless $client;
                    my $req = request_init(RQ_DAEMON, $progname, RQ_FILE, $client->fileno());
                    fromhost($req);

                    if (!hosts_access($req)) {
                        print $client "The maximum number of simultaneous connections reached.\n";
                        $client->shutdown(2);
                        close($client);
                    } else {
                        $connections++;
                        $select->add($client);
                        nonblock($client);
                        print_log(sprintf("Connected: %s:%s", $client->peerhost || 'N/A', $client->peerport || -1));
                        print($client "TTCP\t0.01\n");
                        $hash->{_clients}{$client} = { ssl => $ssl, client => $client };
                    }
                } else {
                    print_log("The maximum number of simultaneous connections reached");
                    $client = $server->accept();
                    print $client "The maximum number of simultaneous connections reached.\n";
                    $client->shutdown(2);
                    close($client);
                }
            } elsif ($sslserver && $client == $sslserver) {
                if ( $connections < 10 ) {
                    $client = $sslserver->accept();
                    next unless $client;
print_log "accept $client\n";
                    my $req = request_init(RQ_DAEMON, $progname, RQ_FILE, $client->fileno());
                    fromhost($req);

                    if (!hosts_access($req)) {
                        print $client "The maximum number of simultaneous connections reached.\n";
                        $client->shutdown(2);
                        close($client);
                    } else {
                        $connections++;
                        $select->add($client);
                        nonblock($client);
                        print_log(sprintf("Connected (ssl): %s:%s", $client->peerhost || 'N/A', $client->peerport || -1));
                        print($client "TTCP @VERSION@\n");
                        $hash->{_clients}{$client} = { ssl => 0, client => $client };
                    }
                } else {
                    print_log("The maximum number of simultaneous connections reached");
                    $client = $server->accept();
                    print $client "The maximum number of simultaneous connections reached.\n";
                    $client->shutdown(2);
                    close($client);
                }
            } else {
                $data = '';
                $rv = $client->read($data, POSIX::BUFSIZ, 0);

                unless (defined($rv) && length $data) {
QUIT:
                    print_log(sprintf("Disconnected: %s:%s", $client->peerhost || 'N/A', $client->peerport || -1));
                    $select->remove($client);
                    $client->shutdown(2);
                    close $client;

warn "FIX autoselect here";
                    delete $hash->{_clients}{$client};

                    $connections--;
                    next;
                }

                $data =~ s/\r//go;

                $datahash->{$client} .= "$data";
                while ($datahash->{$client} =~ s/([^\n]*)\n//) {
                    my $data = $1;
                    my ($cmd, @args);

                    if ($data =~ /\t/) {
                        ($cmd, @args) = split('\t', $data);
                    } else {
                        ($cmd, @args) = split(' ', $data);
                    }
                    next unless length $cmd;
                    if (my $function = $cmd_hash->{$cmd}) {
                        my $action = eval {
				$function->($client, $data, @args);
			    };
                        if ($@) {
			    my $error = $@;
			    print $client "error\t" . $error;
                            print_log "Error: ", $error;
                        } else {
			    if (defined $action && $action eq 'QUIT') {
				goto QUIT;
			    }
			}
                    } else {
                        print_log("Warning no command $cmd ", join(' ', @args), "\n");
                        printf($client "Unknown command %s\n", $cmd);
                    }
                }
            }
        }

        my (@time) = localtime;
        # Once a second
        if ($time[0] != $sec) {

        }
        # Once a minute
        if ($time[1] != $min) {
            # once a minute
	    # alarms should go here
        }
        if ($time[2] != $hour) {
            # once a hour
            for my $client_key (keys %{$hash->{_clients}}) {
                my $client = $hash->{_clients}{$client_key}{client};
                print $client "hourly\t$time[2]\n";
            }
        }
        if ($time[3] != $mday) {
            for my $client_key (keys %{$hash->{_clients}}) {
                my $client = $hash->{_clients}{$client_key}{client};
                print $client "daily\t$time[2]\n";
	    }
        }
        ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = @time;
    }

    print_log "Exit";

    $server->shutdown(2);
    close($server);
}

sub daemonize
{
    chdir '/'               or die "Can't chdir to /: $!";

    foreach my $i (0 .. 4) { POSIX::close($i); }

    defined(my $pid = fork) or die "Can't fork: $!";
    exit if $pid;
    setsid                  or die "Can't start a new session: $!";
}

GetOptions(
    'config=s'  => \$opt_config,
    'debug=i'   => \$opt_debug,
    'help!'     => \$opt_help,
    'man!'      => \$opt_man,
    'versions!' => \$opt_versions,
) or pod2usage(-verbose => 1) && exit;

#pod2usage(-verbose => 1) && exit if ($opt_debug !~ /^[01]$/);
pod2usage(-verbose => 1) && exit if defined $opt_help;
pod2usage(-verbose => 2) && exit if defined $opt_man;

if ($opt_versions) {
    print("@PACKAGE@: @VERSION@\n");
    exit;
}

$0 = "traskerd";
main unless $ENV{TEST_TRASKERD};

__END__

=head1 AUTHOR

G. Allen Morris III <gam3@gam3.net>

=head1 CREDITS

Gnotime convinced me to work on this project.

=head1 TESTED

 Pod::Usage            1.14
 Getopt::Long          2.2602
 Perl    5.00503
 Debian  2.2r5

=head1 BUGS

None that I know of.

=head1 TODO

  This is currently a very long list.

=head1 UPDATES

 2006-04-07   12:05 EST
   Initial code

=cut
